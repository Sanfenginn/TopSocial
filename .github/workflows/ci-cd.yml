name: ci/cd Pipeline
# CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # 自动化测试
  build:
    runs-on: ubuntu-latest
    # CI只在Pull Request事件时运行，但不包括Pull Request被关闭的情况.
    if: >
      github.event_name == 'pull_request' &&
      github.event.action != 'closed'

    # 选择Node.js 版本为 20.x.
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v2

      # 强直清空npm缓存，避免出现奇怪的问题.
      - name: Clear npm cache
        run: npm cache clean --force

        # 安装Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

        # 检查SSH版本，用于调试.
      - name: Check SSH version
        run: ssh -V

        # 安装项目根目录下的依赖.
      - name: Install dependencies
        run: npm ci

        # 安装server目录下的依赖.
      - name: Install dependencies for server
        working-directory: ./server
        run: npm ci

        # 获取json server的在服务器上的地址，用于测试.对所有步骤都生效，不过这个步骤是在哪个目录中执行
      # - name: Set Environment Variables
      - name: Print Environment Variables
        run: echo "DATABASE_URL = $DATABASE_URL"

        # 进行后端jet，supertest 集成测试,
      - name: Run Jest Test
        env:
          DATABASE_URL: ${{ secrets.DB_URL_TS }}
        run: npm test

      # 安装前端依赖
      - name: Install dependencies for client
        working-directory: ./client
        run: npm ci

      - name: Set Environment Variables
        run: |
          echo "VITE_DB_PATH=${{ secrets.DB_URL_TS }}" >> $GITHUB_ENV

        # 进行前端单元测试
      - name: Run Unit Testing for client
        working-directory: ./client
        run: npm run test

        # 检查HTML代码
      - name: Check HTML
        run: npx htmlhint "**/*.html" --ignore "coverage/**/*, client/coverage/**/*"

        # 检查CSS代码
      - name: Check CSS
        run: |
          if compgen -G "**/*.css" > /dev/null; then
            npx stylelint "**/*.css"
          else
            echo "No CSS files found, skipping stylelint."
          fi

        # 检查Javascript代码
      - name: Check JavaScript
        run: |
          if compgen -G "**/*.js" > /dev/null; then
            npx eslint "**/*.js" --no-cache --config .eslintrc.js
          else
            echo "No JavaScript files found, skipping eslint."
          fi

        # 进行SonarCloud扫描代码质量，安全审查
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 自动化部署
  # CD
  deploy:
    runs-on: ubuntu-latest
    # CD只在Push事件时运行，且只在main分支上运行.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Deploy to Production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/TopSocial
            git fetch --all
            git reset --hard origin/main
            git clean -df
            sudo chmod -R 755 /home/ubuntu/TopSocial
            sudo systemctl reload apache2
